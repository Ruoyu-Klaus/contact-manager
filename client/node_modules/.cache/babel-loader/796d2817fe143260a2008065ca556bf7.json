{"ast":null,"code":"import { GET_CONTACT, ADD_CONTACT, DELETE_CONTACT, SET_CURRENT, CLEAR_CURRENT, UPDATE_CONTACT, CLEAR_CONTACT, FILTER_CONTACTS, CLEAR_FILTER, CONTACT_ERROR } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case GET_CONTACT:\n      return { ...state,\n        contacts: action.payload,\n        loading: false\n      };\n\n    case ADD_CONTACT:\n      return { ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false\n      };\n\n    case DELETE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.filter(contact => contact._id !== action.payload),\n        loading: false\n      };\n\n    case CLEAR_CONTACT:\n      return { ...state,\n        contacts: null,\n        filtered: null,\n        current: null,\n        error: null\n      };\n\n    case UPDATE_CONTACT:\n      return { ...state,\n        contacts: state.contacts.map(contact => contact.id === action.payload.id ? action.payload : contact),\n        loading: false\n      };\n\n    case SET_CURRENT:\n      return { ...state,\n        current: action.payload\n      };\n\n    case CLEAR_CURRENT:\n      return { ...state,\n        current: null\n      };\n\n    case FILTER_CONTACTS:\n      return { ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n\n          if (contact.name.match(regex) || contact.email.match(regex)) {\n            return contact;\n          }\n        })\n      };\n\n    case CLEAR_FILTER:\n      return { ...state,\n        filtered: null\n      };\n\n    case CONTACT_ERROR:\n      return { ...state,\n        error: action.payload\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["/Users/ruoyuwang/Documents/GitHub/contact-keeper/client/src/Context/Contact/contactReducer.js"],"names":["GET_CONTACT","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CLEAR_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","filter","contact","_id","filtered","current","error","map","id","regex","RegExp","name","match","email"],"mappings":"AAAA,SACEA,WADF,EAEEC,WAFF,EAGEC,cAHF,EAIEC,WAJF,EAKEC,aALF,EAMEC,cANF,EAOEC,aAPF,EAQEC,eARF,EASEC,YATF,EAUEC,aAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,WAAL;AACE,aAAO,EAAE,GAAGU,KAAL;AAAYG,QAAAA,QAAQ,EAAEF,MAAM,CAACG,OAA7B;AAAsCC,QAAAA,OAAO,EAAE;AAA/C,OAAP;;AACF,SAAKd,WAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,QAAQ,EAAE,CAACF,MAAM,CAACG,OAAR,EAAiB,GAAGJ,KAAK,CAACG,QAA1B,CAFL;AAGLE,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKb,cAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACRC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBP,MAAM,CAACG,OAD1B,CAFL;AAKLC,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKT,aAAL;AACE,aAAO,EACL,GAAGI,KADE;AAELG,QAAAA,QAAQ,EAAE,IAFL;AAGLM,QAAAA,QAAQ,EAAE,IAHL;AAILC,QAAAA,OAAO,EAAE,IAJJ;AAKLC,QAAAA,KAAK,EAAE;AALF,OAAP;;AAOF,SAAKhB,cAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELG,QAAAA,QAAQ,EAAEH,KAAK,CAACG,QAAN,CAAeS,GAAf,CAAmBL,OAAO,IAClCA,OAAO,CAACM,EAAR,KAAeZ,MAAM,CAACG,OAAP,CAAeS,EAA9B,GAAmCZ,MAAM,CAACG,OAA1C,GAAoDG,OAD5C,CAFL;AAKLF,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKZ,WAAL;AACE,aAAO,EAAE,GAAGO,KAAL;AAAYU,QAAAA,OAAO,EAAET,MAAM,CAACG;AAA5B,OAAP;;AACF,SAAKV,aAAL;AACE,aAAO,EAAE,GAAGM,KAAL;AAAYU,QAAAA,OAAO,EAAE;AAArB,OAAP;;AACF,SAAKb,eAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELS,QAAAA,QAAQ,EAAET,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsBC,OAAO,IAAI;AACzC,gBAAMO,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACG,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;;AACA,cAAIG,OAAO,CAACS,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,KAA6BP,OAAO,CAACW,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAAjC,EAA6D;AAC3D,mBAAOP,OAAP;AACD;AACF,SALS;AAFL,OAAP;;AASF,SAAKT,YAAL;AACE,aAAO,EAAE,GAAGE,KAAL;AAAYS,QAAAA,QAAQ,EAAE;AAAtB,OAAP;;AACF,SAAKV,aAAL;AACE,aAAO,EAAE,GAAGC,KAAL;AAAYW,QAAAA,KAAK,EAAEV,MAAM,CAACG;AAA1B,OAAP;;AACF;AACE,aAAOJ,KAAP;AApDJ;AAsDD,CAvDD","sourcesContent":["import {\n  GET_CONTACT,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  CLEAR_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACT:\n      return { ...state, contacts: action.payload, loading: false };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact._id !== action.payload\n        ),\n        loading: false,\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        current: null,\n        error: null,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n        loading: false,\n      };\n    case SET_CURRENT:\n      return { ...state, current: action.payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          if (contact.name.match(regex) || contact.email.match(regex)) {\n            return contact;\n          }\n        }),\n      };\n    case CLEAR_FILTER:\n      return { ...state, filtered: null };\n    case CONTACT_ERROR:\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}