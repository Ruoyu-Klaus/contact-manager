{"ast":null,"code":"import React,{useContext,useRef,useEffect}from'react';import ContactContext from'../../Context/Contact/contactContext';var ContactFilter=function ContactFilter(){var contactContext=useContext(ContactContext);var filterContacts=contactContext.filterContacts,clearFilter=contactContext.clearFilter,filtered=contactContext.filtered;var text=useRef('');useEffect(function(){if(filtered===null){text.current.value='';}});var onChange=function onChange(e){if(text.current.value!==''){filterContacts(e.target.value);}else{clearFilter();}};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"input\",{ref:text,type:\"text\",placeholder:\"\\u641C\\u7D22...\",onChange:onChange}));};export default ContactFilter;","map":{"version":3,"sources":["/Users/ruoyuwang/Documents/GitHub/contact-keeper/client/src/Components/Contacts/ContactFilter.js"],"names":["React","useContext","useRef","useEffect","ContactContext","ContactFilter","contactContext","filterContacts","clearFilter","filtered","text","current","value","onChange","e","target"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAgBC,UAAhB,CAA4BC,MAA5B,CAAoCC,SAApC,KAAqD,OAArD,CACA,MAAOC,CAAAA,cAAP,KAA2B,sCAA3B,CACA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,EAAM,CAC1B,GAAMC,CAAAA,cAAc,CAAGL,UAAU,CAACG,cAAD,CAAjC,CAD0B,GAElBG,CAAAA,cAFkB,CAEwBD,cAFxB,CAElBC,cAFkB,CAEFC,WAFE,CAEwBF,cAFxB,CAEFE,WAFE,CAEWC,QAFX,CAEwBH,cAFxB,CAEWG,QAFX,CAG1B,GAAMC,CAAAA,IAAI,CAAGR,MAAM,CAAC,EAAD,CAAnB,CAEAC,SAAS,CAAC,UAAM,CACd,GAAIM,QAAQ,GAAK,IAAjB,CAAuB,CACrBC,IAAI,CAACC,OAAL,CAAaC,KAAb,CAAqB,EAArB,CACD,CACF,CAJQ,CAAT,CAKA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,CAAC,CAAI,CACpB,GAAIJ,IAAI,CAACC,OAAL,CAAaC,KAAb,GAAuB,EAA3B,CAA+B,CAC7BL,cAAc,CAACO,CAAC,CAACC,MAAF,CAASH,KAAV,CAAd,CACD,CAFD,IAEO,CACLJ,WAAW,GACZ,CACF,CAND,CAOA,mBACE,4CACE,6BAAO,GAAG,CAAEE,IAAZ,CAAkB,IAAI,CAAC,MAAvB,CAA8B,WAAW,CAAC,iBAA1C,CAAkD,QAAQ,CAAEG,QAA5D,EADF,CADF,CAKD,CAtBD,CAwBA,cAAeR,CAAAA,aAAf","sourcesContent":["import React, { useContext, useRef, useEffect } from 'react';\nimport ContactContext from '../../Context/Contact/contactContext';\nconst ContactFilter = () => {\n  const contactContext = useContext(ContactContext);\n  const { filterContacts, clearFilter, filtered } = contactContext;\n  const text = useRef('');\n\n  useEffect(() => {\n    if (filtered === null) {\n      text.current.value = '';\n    }\n  });\n  const onChange = e => {\n    if (text.current.value !== '') {\n      filterContacts(e.target.value);\n    } else {\n      clearFilter();\n    }\n  };\n  return (\n    <div>\n      <input ref={text} type='text' placeholder='搜索...' onChange={onChange} />\n    </div>\n  );\n};\n\nexport default ContactFilter;\n"]},"metadata":{},"sourceType":"module"}