{"ast":null,"code":"import _toConsumableArray from\"/Users/ruoyuwang/Documents/GitHub/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/ruoyuwang/Documents/GitHub/contact-keeper/client/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_CONTACT,ADD_CONTACT,DELETE_CONTACT,SET_CURRENT,CLEAR_CURRENT,UPDATE_CONTACT,CLEAR_CONTACT,FILTER_CONTACTS,CLEAR_FILTER,CONTACT_ERROR}from'../types';export default(function(state,action){switch(action.type){case GET_CONTACT:return _objectSpread({},state,{contacts:action.payload,loading:false});case ADD_CONTACT:return _objectSpread({},state,{contacts:[action.payload].concat(_toConsumableArray(state.contacts)),loading:false});case DELETE_CONTACT:return _objectSpread({},state,{contacts:state.contacts.filter(function(contact){return contact._id!==action.payload;}),loading:false});case CLEAR_CONTACT:return _objectSpread({},state,{contacts:null,filtered:null,current:null,error:null});case UPDATE_CONTACT:return _objectSpread({},state,{contacts:state.contacts.map(function(contact){return contact._id===action.payload._id?action.payload:contact;}),current:null,loading:false});case SET_CURRENT:return _objectSpread({},state,{current:action.payload});case CLEAR_CURRENT:return _objectSpread({},state,{current:null});case FILTER_CONTACTS:return _objectSpread({},state,{filtered:state.contacts.filter(function(contact){var regex=new RegExp(\"\".concat(action.payload),'gi');if(contact.name.match(regex)||contact.email.match(regex)){return contact;}})});case CLEAR_FILTER:return _objectSpread({},state,{filtered:null});case CONTACT_ERROR:return _objectSpread({},state,{error:action.payload});default:return state;}});","map":{"version":3,"sources":["/Users/ruoyuwang/Documents/GitHub/contact-keeper/client/src/Context/Contact/contactReducer.js"],"names":["GET_CONTACT","ADD_CONTACT","DELETE_CONTACT","SET_CURRENT","CLEAR_CURRENT","UPDATE_CONTACT","CLEAR_CONTACT","FILTER_CONTACTS","CLEAR_FILTER","CONTACT_ERROR","state","action","type","contacts","payload","loading","filter","contact","_id","filtered","current","error","map","regex","RegExp","name","match","email"],"mappings":"2RAAA,OACEA,WADF,CAEEC,WAFF,CAGEC,cAHF,CAIEC,WAJF,CAKEC,aALF,CAMEC,cANF,CAOEC,aAPF,CAQEC,eARF,CASEC,YATF,CAUEC,aAVF,KAWO,UAXP,CAaA,eAAe,SAACC,KAAD,CAAQC,MAAR,CAAmB,CAChC,OAAQA,MAAM,CAACC,IAAf,EACE,IAAKZ,CAAAA,WAAL,CACE,wBAAYU,KAAZ,EAAmBG,QAAQ,CAAEF,MAAM,CAACG,OAApC,CAA6CC,OAAO,CAAE,KAAtD,GACF,IAAKd,CAAAA,WAAL,CACE,wBACKS,KADL,EAEEG,QAAQ,EAAGF,MAAM,CAACG,OAAV,4BAAsBJ,KAAK,CAACG,QAA5B,EAFV,CAGEE,OAAO,CAAE,KAHX,GAKF,IAAKb,CAAAA,cAAL,CACE,wBACKQ,KADL,EAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeG,MAAf,CACR,SAAAC,OAAO,QAAIA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAA3B,EADC,CAFZ,CAKEC,OAAO,CAAE,KALX,GAOF,IAAKT,CAAAA,aAAL,CACE,wBACKI,KADL,EAEEG,QAAQ,CAAE,IAFZ,CAGEM,QAAQ,CAAE,IAHZ,CAIEC,OAAO,CAAE,IAJX,CAKEC,KAAK,CAAE,IALT,GAOF,IAAKhB,CAAAA,cAAL,CACE,wBACKK,KADL,EAEEG,QAAQ,CAAEH,KAAK,CAACG,QAAN,CAAeS,GAAf,CAAmB,SAAAL,OAAO,QAClCA,CAAAA,OAAO,CAACC,GAAR,GAAgBP,MAAM,CAACG,OAAP,CAAeI,GAA/B,CAAqCP,MAAM,CAACG,OAA5C,CAAsDG,OADpB,EAA1B,CAFZ,CAKEG,OAAO,CAAE,IALX,CAMEL,OAAO,CAAE,KANX,GAQF,IAAKZ,CAAAA,WAAL,CACE,wBAAYO,KAAZ,EAAmBU,OAAO,CAAET,MAAM,CAACG,OAAnC,GACF,IAAKV,CAAAA,aAAL,CACE,wBAAYM,KAAZ,EAAmBU,OAAO,CAAE,IAA5B,GACF,IAAKb,CAAAA,eAAL,CACE,wBACKG,KADL,EAEES,QAAQ,CAAET,KAAK,CAACG,QAAN,CAAeG,MAAf,CAAsB,SAAAC,OAAO,CAAI,CACzC,GAAMM,CAAAA,KAAK,CAAG,GAAIC,CAAAA,MAAJ,WAAcb,MAAM,CAACG,OAArB,EAAgC,IAAhC,CAAd,CACA,GAAIG,OAAO,CAACQ,IAAR,CAAaC,KAAb,CAAmBH,KAAnB,GAA6BN,OAAO,CAACU,KAAR,CAAcD,KAAd,CAAoBH,KAApB,CAAjC,CAA6D,CAC3D,MAAON,CAAAA,OAAP,CACD,CACF,CALS,CAFZ,GASF,IAAKT,CAAAA,YAAL,CACE,wBAAYE,KAAZ,EAAmBS,QAAQ,CAAE,IAA7B,GACF,IAAKV,CAAAA,aAAL,CACE,wBAAYC,KAAZ,EAAmBW,KAAK,CAAEV,MAAM,CAACG,OAAjC,GACF,QACE,MAAOJ,CAAAA,KAAP,CArDJ,CAuDD,CAxDD","sourcesContent":["import {\n  GET_CONTACT,\n  ADD_CONTACT,\n  DELETE_CONTACT,\n  SET_CURRENT,\n  CLEAR_CURRENT,\n  UPDATE_CONTACT,\n  CLEAR_CONTACT,\n  FILTER_CONTACTS,\n  CLEAR_FILTER,\n  CONTACT_ERROR,\n} from '../types';\n\nexport default (state, action) => {\n  switch (action.type) {\n    case GET_CONTACT:\n      return { ...state, contacts: action.payload, loading: false };\n    case ADD_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n        loading: false,\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          contact => contact._id !== action.payload\n        ),\n        loading: false,\n      };\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        contacts: null,\n        filtered: null,\n        current: null,\n        error: null,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map(contact =>\n          contact._id === action.payload._id ? action.payload : contact\n        ),\n        current: null,\n        loading: false,\n      };\n    case SET_CURRENT:\n      return { ...state, current: action.payload };\n    case CLEAR_CURRENT:\n      return { ...state, current: null };\n    case FILTER_CONTACTS:\n      return {\n        ...state,\n        filtered: state.contacts.filter(contact => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          if (contact.name.match(regex) || contact.email.match(regex)) {\n            return contact;\n          }\n        }),\n      };\n    case CLEAR_FILTER:\n      return { ...state, filtered: null };\n    case CONTACT_ERROR:\n      return { ...state, error: action.payload };\n    default:\n      return state;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}